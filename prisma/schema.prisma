// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @default(autoincrement()) @id
  email String @unique
  firstName String? 
  lastName String?
  social Json?

  courses CourseEnrollment[]
  testResults TestResult[] @relation(name: "student")
  testsGraded TestResult[] @relation(name: "teacher")
  tokens Token[]
}

model Token {
  id Int @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type TokenType
  emailToken String?
  valid Boolean @default(true)
  expiration DateTime

  userId Int
  user User @relation(fields: [userId], references: [id])
}

enum TokenType {
  email
  API
}

model Course {
  id Int @default(autoincrement()) @id
  name String
  courseDetails String

  members CourseEnrollment[]
  tests Test[] 
}

model Test {
  id Int @default(autoincrement()) @id
  updatedAt DateTime @updatedAt
  name String
  date DateTime
  courseId Int
  course Course @relation(fields: [courseId], references: [id])
  testResults TestResult[]
}

model TestResult {
  id Int @default(autoincrement()) @id
  createdAt DateTime @default(now())
  result Int
  graderId Int
  grader User @relation(name: "grader", fields: [graderId], references: [id])
  studentId Int
  student User @relation(name: "student", fields: [studentId], references: [id])
  testId Int
  test Test @relation(fields: [testId], references: [id])
}

model CourseEnrollment {
  
  createdAt DateTime @default(now())
  role UserRole
  userId Int
  user User @relation(fields: [userId], references: [id])
  courseId Int
  course Course @relation(fields: [courseId], references: [id])

  @@id([userId,courseId])
  @@index([userId, role]) //??
}

enum UserRole {
  teacher
  student
}